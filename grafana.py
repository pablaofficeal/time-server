import customtkinter as ctk
from tkinter import filedialog
import json
import matplotlib.pyplot as plt
from collections import defaultdict
from datetime import datetime
import os

HISTORY_FILE = "history.json"

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


def log_event(event_type, details=""):
    event = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "event": event_type,
        "details": details
    }

    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            history = json.load(f)
    else:
        history = []

    history.append(event)

    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, indent=4, ensure_ascii=False)


class TimeTrackerVisualizer(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("‚è±Ô∏è Time Tracker Visualizer")
        self.geometry("600x350")

        self.label = ctk.CTkLabel(self, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º:")
        self.label.pack(pady=15)

        self.select_button = ctk.CTkButton(self, text="–í—ã–±—Ä–∞—Ç—å JSON", command=self.load_json)
        self.select_button.pack(pady=10)

        self.status_label = ctk.CTkLabel(self, text="", text_color="orange")
        self.status_label.pack(pady=10)

        log_event("AppStarted", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    def load_json(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON Files", "*.json")])
        if not file_path:
            self.status_label.configure(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            log_event("FileOpenCanceled")
            return

        log_event("FileOpened", f"–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {file_path}")

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            self.parse_and_visualize(data, file_path)

        except Exception as e:
            self.status_label.configure(text=f"–û—à–∏–±–∫–∞: {e}")
            log_event("FileOpenError", str(e))

    def parse_and_visualize(self, data, path):
        program_times = defaultdict(int)

        for record in data:
            app = record.get("app_name", "Unknown")
            dur = record.get("duration", 0)
            program_times[app] += dur

        filtered = {k: v for k, v in program_times.items() if v > 0 and k != "Unknown"}

        if not filtered:
            self.status_label.configure(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            log_event("GraphSkipped", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return

        total = sum(filtered.values())
        threshold = total * 0.02
        major_apps = {k: v for k, v in filtered.items() if v >= threshold}

        if not major_apps:
            self.status_label.configure(text="–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–µ–≤—ã—à–∞—é—â–∏—Ö 2% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            log_event("GraphSkipped", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ < 2%")
            return

        apps = list(major_apps.keys())
        durations_min = [round(v / 60, 2) for v in major_apps.values()]

        plt.figure(figsize=(8, 6))
        plt.pie(durations_min, labels=apps, autopct="%1.1f%%", startangle=140)
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n(–º–µ–Ω—å—à–µ 2% –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è)")
        plt.axis("equal")
        plt.tight_layout()

        plt.show()

        self.status_label.configure(text="–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω! üéØ")
        log_event("GraphBuilt", f"–ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ñ–∞–π–ª—É: {os.path.basename(path)}")


if __name__ == "__main__":
    app = TimeTrackerVisualizer()
    app.mainloop()
